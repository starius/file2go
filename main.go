package main

import (
	"bytes"
	"flag"
	"fmt"
	"io/ioutil"
	"regexp"
)

var (
	file = flag.String("file", "", "File to embed")
	pkg  = flag.String("pkg", "main", "Go package to put into the file")
)

var badChars = regexp.MustCompile(`[^a-zA-Z0-9_]`)

const fileTemplate = `package %s

// Code generated by file2go. DO NOT EDIT.
//
// go:generate go get github.com/starius/file2go
// go:generate file2go -file=%s -pkg=%s

const %s = "%s"
`

func main() {
	flag.Parse()

	varName := badChars.ReplaceAllString(*file, "_")
	content, err := ioutil.ReadFile(*file)
	if err != nil {
		panic(err)
	}

	var contentGo bytes.Buffer
	bytes2string(&contentGo, content)

	fileBody := fmt.Sprintf(fileTemplate, *pkg, *file, *pkg, varName, contentGo.String())

	if err := ioutil.WriteFile(*file+".go", []byte(fileBody), 0644); err != nil {
		panic(err)
	}
}

// Based on https://github.com/rakyll/statik/blob/6b2f3ee522b695afd5d4ce80ca4dd5654670c778/statik.go#L287
func bytes2string(dest *bytes.Buffer, data []byte) {
	for _, b := range data {
		if b == '\n' {
			dest.WriteString(`\n`)
			continue
		}
		if b == '\\' {
			dest.WriteString(`\\`)
			continue
		}
		if b == '"' {
			dest.WriteString(`\"`)
			continue
		}
		if (b >= 32 && b <= 126) || b == '\t' {
			dest.WriteByte(b)
			continue
		}
		fmt.Fprintf(dest, "\\x%02x", b)
	}
}
